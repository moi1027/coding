package org.moi.algorithm.leecode.tree;

/**
 * @program:
 * @description: 617. 合并二叉树 难度：easy
 * @author: moi
 * @create: 2021/1/24 20:15
 **/
public class MergeTrees {

    /**
     * 题目：给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。
     *
     * 你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为?NULL 的节点将直接作为新二叉树的节点。
     *
     * 示例?1:
     *
     * 输入:
     * 	Tree 1                     Tree 2
     *           1                         2
     *          / \                       / \
     *         3   2                     1   3
     *        /                           \   \
     *       5                             4   7
     * 输出:
     * 合并后的树:
     * 	     3
     * 	    / \
     * 	   4   5
     * 	  / \   \
     * 	 5   4   7
     * 注意:?合并必须从两个树的根节点开始
     *
     *
     */

    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        if(t1 == null&&t2==null){
            return null;
        }
        if(t1 != null && t2 == null){
            return t1;
        }
        if(t1 == null && t2 != null){
            return t2;
        }
        subProcess(t1,t2);
        return t1;
    }

    public TreeNode subProcess(TreeNode t1, TreeNode t2){
        if(t1 == null && t2 != null) {
            return t2;
        }
        if(t2 == null){
            return t1;
        }
        t1.val = t1.val+t2.val;
        t1.left = subProcess(t1.left,t2.left);
        t1.right = subProcess(t1.right,t2.right);
        return t1;
    }

    public static void main(String[] args) {
        TreeNode t1 = new TreeNode(1);
        t1.left = new TreeNode(3);
        t1.right = new TreeNode(2);
        t1.left.left = new TreeNode(5);
        TreeNode t2 = new TreeNode(2);
        t2.left = new TreeNode(1);
        t2.right = new TreeNode(3);
        t2.left.right = new TreeNode(4);
        t2.right.right = new TreeNode(7);
        new MergeTrees().mergeTrees(t1,t2);
    }
}
